{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","InputSentence","props","useState","inputValue","setInputValue","InputDiv","type","onKeyDown","e","keyCode","trim","lift","target","value","onChange","placeholder","Parag","allTodos","map","todo","P","key","onClick","del","onTouchStart","classList","add","onTouchEnd","remove","p","App","savedTodos","window","localStorage","getItem","JSON","parse","todos","setTodos","className","newTodo","todoKey","uniqid","setItem","stringify","done","todosToKeep","filter","a","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"k5DAyCA,IAAMA,EAAYC,IAAOC,IAAV,KAsBf,SAASC,EAAcC,GAAQ,IAAD,EACQC,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,KAW5B,OACE,kBAACC,EAAD,KACE,2BACEC,KAAK,OACLC,UAVgB,SAAAC,GACF,KAAdA,EAAEC,SAAkBN,EAAWO,SACjCT,EAAMU,KAAKH,EAAEI,OAAOC,OACpBT,EAAc,MAQZU,SAde,SAAAN,GACnBJ,EAAcI,EAAEI,OAAOC,QAcnBA,MAAOV,EACPY,YAAY,qBAKpB,IAAMV,EAAWP,IAAOC,IAAV,KAqBd,SAASiB,EAAMf,GACb,OAAOA,EAAMgB,SAASC,KAAI,SAAAC,GAAI,OAC5B,kBAACC,EAAD,CACEC,IAAKF,EAAKE,IACVC,QAAS,WACPrB,EAAMsB,IAAIJ,EAAKE,MAEjBG,aAAc,SAAAhB,GACZA,EAAEI,OAAOa,UAAUC,IAAI,WAEzBC,WAAY,SAAAnB,GACVA,EAAEI,OAAOa,UAAUG,OAAO,YAG3BT,EAAKA,SAIZ,IAAMC,EAAItB,IAAO+B,EAAV,KA+BQC,EAvJf,WAAgB,IAAD,EACa5B,oBAAS,WACjC,IACE,IAAM6B,EAAaC,OAAOC,aAAaC,QAAQ,eAC/C,OAAOH,EAAaI,KAAKC,MAAML,GAAc,GAC7C,MAAOvB,GACP,MAAO,OANE,mBACN6B,EADM,KACCC,EADD,KA0Bb,OACE,yBAAKC,UAAU,OACb,kBAAC1C,EAAD,KACE,8CACA,kBAACG,EAAD,CAAeW,KApBL,SAAA6B,GACd,IAAIC,EAAUC,MACdV,OAAOC,aAAaU,QAClB,cACAR,KAAKS,UAAL,CAAgB,CAAEzB,KAAMqB,EAASK,MAAM,EAAOxB,IAAKoB,IAAnD,mBAAiEJ,MAEnEC,EAAS,CAAC,CAAEnB,KAAMqB,EAASK,MAAM,EAAOxB,IAAKoB,IAArC,mBAAmDJ,QAevD,kBAACrB,EAAD,CAAOC,SAAUoB,EAAOd,IAZX,SAAAkB,GACjB,IAAMK,EAAc,WAClB,OAAOT,EAAMU,QAAO,SAAAC,GAAC,OAAIA,EAAE3B,MAAQoB,MAErCT,OAAOC,aAAaU,QAAQ,cAAeR,KAAKS,UAAUE,IAC1DR,EAASQ,SCjBOG,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.250369b0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport uniqid from 'uniqid';\n\n/* APP */\nfunction App() {\n  const [todos, setTodos] = useState(() => {\n    try {\n      const savedTodos = window.localStorage.getItem('storedTodos');\n      return savedTodos ? JSON.parse(savedTodos) : [];\n    } catch (e) {\n      return [];\n    }\n  });\n  // ADD NEW TODO\n  const addTodo = newTodo => {\n    let todoKey = uniqid();\n    window.localStorage.setItem(\n      'storedTodos',\n      JSON.stringify([{ todo: newTodo, done: false, key: todoKey }, ...todos])\n    );\n    setTodos([{ todo: newTodo, done: false, key: todoKey }, ...todos]);\n  };\n  // DELETE TODO\n  const deleteTodo = todoKey => {\n    const todosToKeep = () => {\n      return todos.filter(a => a.key !== todoKey);\n    };\n    window.localStorage.setItem('storedTodos', JSON.stringify(todosToKeep));\n    setTodos(todosToKeep);\n  };\n  return (\n    <div className=\"app\">\n      <Container>\n        <h1>Add Your Todos</h1>\n        <InputSentence lift={addTodo} />\n        <Parag allTodos={todos} del={deleteTodo} />\n      </Container>\n    </div>\n  );\n}\nconst Container = styled.div`\n  max-width: 500px;\n  text-align: center;\n  margin: 0 auto;\n  padding: 0 2rem;\n  h1 {\n    font-size: 48px;\n    color: #f3cf78;\n    margin: 2rem auto 2rem auto;\n    padding: 1.5rem;\n    border-bottom: 20px dotted rgba(243, 207, 120, 0.04);\n  }\n  @media (max-width: 480px) {\n    h1 {\n      font-size: 30px;\n      border-bottom: none;\n      padding: 0;\n    }\n  }\n`;\n\n/* INPUT */\nfunction InputSentence(props) {\n  const [inputValue, setInputValue] = useState('');\n  const handleChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleKeyDown = e => {\n    if (e.keyCode === 13 && inputValue.trim()) {\n      props.lift(e.target.value);\n      setInputValue('');\n    }\n  };\n  return (\n    <InputDiv>\n      <input\n        type=\"text\"\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        value={inputValue}\n        placeholder=\"Add a todo here\"\n      />\n    </InputDiv>\n  );\n}\nconst InputDiv = styled.div`\n  input {\n    color: #ddd;\n    font-style: italic;\n    display: block;\n    font-size: 17px;\n    width: 100%;\n    padding: 0.5rem;\n    margin: 1rem auto 5rem auto;\n    background: #333;\n    border: none;\n    border-bottom: 10px solid rgba(243, 207, 120, 0.1);\n    }\n  }\n  @media (max-width: 480px) {\n    input {\n      margin: 0 auto 2rem auto;\n    }\n`;\n\n/* PARAG */\nfunction Parag(props) {\n  return props.allTodos.map(todo => (\n    <P\n      key={todo.key}\n      onClick={() => {\n        props.del(todo.key);\n      }}\n      onTouchStart={e => {\n        e.target.classList.add('active');\n      }}\n      onTouchEnd={e => {\n        e.target.classList.remove('active');\n      }}\n    >\n      {todo.todo}\n    </P>\n  ));\n}\nconst P = styled.p`\n  color: #ddd;\n  position: relative;\n  text-align: center;\n  font-size: 1.2rem;\n  padding: 0.7rem;\n  margin-bottom: 1.5rem;\n  border-left: 5px solid rgba(243, 207, 120, 0.1);\n  border-right: 5px solid rgba(243, 207, 120, 0.1);\n  background: #2c2c2c;\n  user-select: none;\n  &&:hover {\n    color: #ccc;\n    background: #2e2e2e;\n  }\n  &&:active {\n    transform: rotate(3deg) scale(1.08);\n    text-decoration: line-through;\n    color: #ce5b5b;\n    border-left: 5px solid #ce5b5b;\n    border-right: 5px solid #ce5b5b;\n  }\n  &&.active {\n    transform: rotate(3deg) scale(1.08);\n    text-decoration: line-through;\n    color: #ce5b5b;\n    border-left: 5px solid #ce5b5b;\n    border-right: 5px solid #ce5b5b;\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}